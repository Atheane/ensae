[
{"url": "https://pythonprogramming.net/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["Learn how to use Python with Pandas, Matplotlib, and other modules to gather insights from and about your data.", "Control hardware with Python programming and the Raspberry Pi.", "How to develop websites with either the Flask or Django frameworks for Python.", "Create your own games with Python's PyGame library, or check out the multi-platform Kivy.", "Learn the basic and intermediate Python fundamentals.", "Create software with a user interface using Tkinter, PyQt, or Kivy.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/robotics-tutorials/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["How to setup and use your Raspberry Pi with various projects.", "Use the Raspberry Pi along with the GoPiGo to learn about robotics.", "Build and program your own quadcopter from scratch to take-off.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/+=1/", "h1": [], "h2": [], "h3": [], "p": ["Want a video series to go? No problem, as a +=1 subscriber, you can download the videos for entire series.", "Work out your problem-solving skills, test your knowledge of the material you are learning and learn actual use-cases for what you learn.", "+=1 users are given a direct line of communication for help, discussion, suggestions, and more.", "Adsense ads will be no longer shown to you as a subscriber.", "The cost for subscription is $9 per month via PayPal.", "After subscribing, head to this same page for the +=1 dashboard, or you can head straight to the tutorials for the included quizzes and challenges. Allow for up to 5 minutes for changes to take place, though it should be near-instant.", "You must be logged in to subscribe. Please ", " or ", " an account."]},
{"url": "https://pythonprogramming.net/python-fundamental-tutorials/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["Just getting started?", "Not a problem, learn the basics of programming with Python 3 here!", "Python fundamentals that aren't basic.", "Learn topics like Object Oriented Programming, multiprocessing, generators, and much more.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/game-development-tutorials/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["Develop games in Python with PyGame.", "Implement OpenGL technology with PyGame using PyOpenGL.", "Create cross-platform (Windows, Mac, Linux, iOS, and Android) games and applications with Python's Kivy.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["Learn how to use Python with Pandas, Matplotlib, and other modules to gather insights from and about your data.", "Control hardware with Python programming and the Raspberry Pi.", "How to develop websites with either the Flask or Django frameworks for Python.", "Create your own games with Python's PyGame library, or check out the multi-platform Kivy.", "Learn the basic and intermediate Python fundamentals.", "Create software with a user interface using Tkinter, PyQt, or Kivy.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/web-development-tutorials/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["Learn the basics of creating various websites with the Flask Python micro-framework.", "Create websites with the higher-level framework, Django.", "Flask and the other web frameworks besides Django are lower-level (sometimes called micro) frameworks. This means they are mainly meant to provide only the bare minimum of tools to get your website running. The underlying system of logic, design, and organization is done almost entirely by the developer from this point.", "Django provides the underlying connections to make a website actually run, but also provides the developer with a plethora of tools and systems to aid in the background.", "Flask is more open-ended to unique systems. A developer can create a backend system just about however they want, but they are likely to not use best-practices this way. Django is more closed off, encouraging the developer to do things the \"Django way.\" While this can feel restrictive, it also means the developer is more likely to do things correctly, right out of the gate.", "In the end, both Django and Flask can make the exact same websites, as well as being as customize-able and as high quality as the other. This website, for example, is a Flask website, but could just as easily be a Django site.", "The best choice is to make an attempt at both, and see which suits you best.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/gui-development-tutorials/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["Create up-to-date looking graphical user interfaces with PyQt.", "Tkinter, part of the Python standard library, can be used to create simple GUI applications.", "Create cross-platform (Windows, Mac, Linux, iOS, and Android) games and applications with Python's Kivy.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/register/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["By registering, you accept the ", " and ", "\n\t\t\t", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/login/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["Please login:"], "p": ["No account? ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/794/DBSCAN%20and%20Optics%20algorithm/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["DBSCAN and Optics algorithm"], "p": ["You must be logged in to post. Please ", " or ", " an account.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/793/Whos%20Online%20with%20Python%20Flask/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["Whos Online with Python Flask"], "p": ["You must be logged in to post. Please ", " or ", " an account.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/787/Multi%20target%20classifier/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["Multi target classifier"], "p": ["You must be logged in to post. Please ", " or ", " an account.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/building-quadcopter-tutorial-intro/", "h1": [], "h2": ["Building and Programming a Quadcopter/multicopter introduction", "Login", "Sign up"], "h3": [], "p": ["Hello and welcome to a tutorial series covering how to build a quadcopter. First, we'll be going over the parts and putting together a quadcopter/multicopter, and then we will be talking about using a Raspberry Pi with various sensors and peripherals on the quadcopter. Even if you do not have any interest in putting a Raspberry Pi computer on your quadcopter, the first few tutorials are purely aimed at putting together a quadcopter and flying it with a transmitter. The quadcopter we'll be building:", "To start, why might you want to custom build a quadcopter or drone as opposed to simply going to the store and buying one. First, when tinkering with things, you're more likely to break it, fry it, or, in our case: crash it! The issue here is that commercially available drones tend to come with a lot of proprietary parts. What this really means usually is that the company has a monopoly on those specific parts and they charge as such. Also, as you decide to change things, if you have custom built your quadcopter, you can switch out motors, propellers, a frame, and all sorts of things easily with a custom build.", "Despite it likely being a better choice to build a quadcopter, it can be quite the hurdle to figure out all of the things you need and how to put one together. If you're like me when I first started, you don't know that not all motors spin in the same direction, for example.", "The first choice you have to make is what size of quadcopter / drone you want to make. There are various sizes, but the most popular size is the 250 for custom quadcopters, and then 500ish for the commercial drones. The number corresponds to the distance, diagonally between the motors. At first, I chose to go with a 525, but the 525 is quite large, and not as much fun to fly in my opinion. It does more damage if it does crash, and requires a bit more space to safely fly around. The 250 size is a total blast to fly, much easier to do very quick maneuvers with, and doesn't need as much space to fly safely. A 500 is not double the size of a 250, it is more like 4x the size, so keep this in mind. In this tutorial, we'll wind up building a 250, but feel free to build whatever size you want. The actual needed materials and build process is the same. Costs are also ~ the same, so it really does not matter beyond personal preference. Here's an example of the the sizes:", "The top 2 are 525, the bottom two are size 250", "Here are two 250s next to each other. As you can see, one is fatter, and longer than the other overall, despite both being called 250 frames", "I have gone with the slightly fatter/longer frame in order to fit the Raspberry Pi + Grove Pi onboard, as you can see stuffed in there:", "If you are not looking to add things to the frame, and just want to have a remote-controlled quadcopter, get whatever frame you like, otherwise be mindful of your options. Moving forward to the next tutorial, we're going to be talking about parts!", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t", "Contact: Harrison@pythonprogramming.net.", "Programming is a superpower."]},
{"url": "https://pythonprogramming.net/store/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["Show your love for Python, support free Python programming education, and support the Python Software Foundation with every purchase. 10% of sales are donated to the Python Software Foundation.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/robotics-raspberry-pi-tutorial-gopigo-introduction/", "h1": [], "h2": ["Robotics with Python Raspberry Pi and GoPiGo Introduction", "Login", "Sign up"], "h3": [], "p": ["This tutorial series covers a more basic version of programming robotics with Python and the Raspberry Pi, using the GoPiGo framework. The idea of the GoPiGo framework for robotics is to get you up and running as fast, and as simply, as possible. With the GoPiGo, you can build your robot in about 10 minutes, and you're ready to begin programming it.", "Not only is building it a breeze, you can also program on top of the GoPiGo software that is already provided to you. In our previous, more challenging, ", ", we found that we not only needed to build our robot, but we also had to work directly with the IO pins on the Raspberry Pi, and the H-bridge, sending various signal patterns to achieve different results with motors, for example. This proved tedious and challenging for some. The GoPiGo simplifies that for us, and all we need to program to make our robot go forward is ", ". Of course, if you would still like to see how the forward function works, you can still peak into the gopigo.py script, and tinker if you so chose.", "While you can initially use the GoPiGo software to get you running as quick as possible, you can continue the challenge by writing your own software, as well as by connecting various sensors. For us, we're going to first create a simple remote-control script for our robot, and then we'll make it autonomous. We will use the distance sensor to make sure we aren't slamming into walls, and then we'll use the camera so that we can initially see what our robot is doing, and then we'll even get our feet wet with a little bit of OpenCV and face detection!", "If that all sounds interesting to you, stick around! First, we're going to need the supply list.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/introduction-raspberry-pi-tutorials/", "h1": [], "h2": ["Introduction - Raspberry Pi tutorial", "Login", "Sign up"], "h3": [], "p": ["Welcome to a series on the ", ". One of the most common questions I see about the Raspberry Pi is \"What do I do with this?\"", "The Raspberry Pi is a fully-fledged mini computer, capable of doing whatever you might do with a computer. It comes with 4x USB, HDMI, LAN, built-in Bluetooth/WiFi support, 1GB RAM, 1.2GHz quad-core ARM CPU, 40 GPIO (General Purpose Input Output) pins, audio and composite video output, and more. Rather than not having many choices, instead, your options are staggeringly large!", "For some examples, I have personally used Raspberry Pis to:\n\n", "I have also used Raspberry Pis as home security cameras, server monitoring devices, cheap headless machines (basically running low-weight scripts 24/7 with a low cost-to-me)... others have used them for media centers and even for voice-enabled IoT devices. The possibilities are endless, but first we need to get acquainted!", "If you do not already have a Raspberry Pi, you can buy one ", ", or in a variety of other locations.", "Beyond the Raspberry Pi, it can be wise, but not required, to get a case. Make sure that, if you do get a case, it has openings for the GPIO pins to be connected, otherwise you're ruining all of the fun. You will also need a ", " and at least an 8GB micro SD card, but I would suggest a ", " or greater.", "You will also want to have a spare monitor (HDMI), keyboard, and mouse handy to make things easier when first setting up. You wont will eventually be able to control your Pi remotely, so you wont always need a separate keyboard, mouse, and monitor. If you don't have a monitor with HDMI input, you can buy something like an ", ".", "This is all assuming you're going to be using a Raspberry Pi 3 Model B. If you're using an older version board, please see what you might need to change, for example, the older Rasbperry Pis take a full-sized SD card, but the latest model requires a micro SD card. Also, the Raspberry Pi 3 Model B has built-in wifi, where the older models will require a wifi dongle.", "A typical Raspberry Pi shopping list, assuming you have a mouse, keyboard, and HDMI monitor that you can use temporarily while setting up is:", "For a total of $57 and free shipping, at least on Amazon. You can also find kits that come with everything you might need and maybe some more goodies for a similar price, like ", ".", "Finally, JUST in case you don't have an SD card reader on your computer, you can buy a ", " for under $10.", "Additionally, if you plan to join us on the initial GPIO (General Purpose Input Output pins) tutorials, you will also want to pick up:", "For the jumpers, breadboard, and leds, you could also just buy a kit, something like: ", ".", "There will be more parts further on in the series as well, but we'll get to them later.", "Assuming you've got your board, and an SD card, you're ready to carry on. Being a full computer, the Raspberry Pi uses an Operating System. While you can run headless (from a command line, no desktop), you can also have a GUI desktop if you like. There are quite a few choices for Raspberry Pi operating systems, but most people choose Raspbian, which is a Debian-based operating system that is optimized specifically for the Raspberry pi. This operating system is also most likely to support other packages that you may already be familiar with from other Linux distributions, so it makes for a good starting OS.", "There are also a few ways to install and use an operating system on the Raspberry Pi. The most user-friendly method is to use the NOOBS (New Out of Box Software) installer. If you're comfortable enough, you can just simply download the operating system ISO, format the SD card, mount the ISO, and boot the Pi. If that sounds like gibberish to you, then follow along with the NOOBS installation option.", "While we're working with the SD card, let's go ahead and ", ", which is just over 1GB.", "First, we must format the SD card. If you are on Windows, you can use ", ". Mac users can also use SD Formatter, but they have a built in formatter, and Linux users can use GParted. Whatever the case, you need to format the SD card, do not do a \"quick format\" and do make sure you have the \"resize\" option on. Using SDFormatter on Windows, and chosing options:", "This should go without saying, but do make sure you're formatting the right drive. This will format any flash drive, in alphabetical order. If you had something plugged in already, like your favorite USB drive, and forgot about it, that'd likely be the default choice to format, and then you'd spend all afternoon trying to recover your data rather than enjoying playing with your Raspberry Pi.", "Once you're done, great. Now, assuming you've downloaded the NOOBS package, let's go ahead and extract that. Now, we want to copy all these NOOBS contents to our SD Card. Do not drag the directory, but rather the contents:", "While that's transferring, let's talk about a few things on the actual Raspberry Pi board:", "The GPIO (General Purpose Input/Output) pins are underlined in blue. We can use these to control peripheral devices like motors, servos, and more. Circled in red is the micro usb power input for the board. In orange, the HDMI output port. The yellow is where you can plug in the Raspberry Pi camera module. The grey circle has the USB ports. This is obviously not everything, but these are the main things to note.", "Once everything is transferred to the micro SD card, you can put it in the Raspberry Pi. The slot is on the bottom side of the board, circled in yellow here:", "Once you've got the SD card plugged in, go ahead and plug in your keyboard, mouse, and HDMI cable to your monitor. Finally, plug in the power, and this will start up the Raspberry Pi. Once fully loaded, you should land on the following screen:", "Now you can choose the operating system. In my case, the only option is Raspbian, so I will check that box, then click \"install.\"", "Let the process go, this will take a while, something like 20-30 minutes or so.", "Once that's done, hit okay and the device should reboot to desktop. While on the desktop, wait for a moment for wifi to start up and find available connections. Connect to your wifi network if possible. You can also plug directly in with an ethernet cable if you don't have wifi. You can also just continue interacting directly with the Raspberry Pi with the mouse and keyboard connected to it if you like, but I prefer to access it remotely.", "Can you guess which network is mine?!", "Alright, once we've connected to our network, we'd like to actually interface with the Pi. First, we want to update. Open a terminal by either right clicking on the desktop and opening terminal that way, or by doing ", ". Now, in the terminal, do: ", " and then ", "You do not type the ", " sign, it's there to denote when you're typing something in the command line. The upgrade might take a minute. While we wait, your Raspberry Pi's default credentials are: ", " ", ". For some reason, the ", " for me was taking absurdly long. You need to be connected to your network, and have internet access, so make sure you have those things first before doing this, but I still was having trouble. I was able to solve this by doing:", "Then replace everything here with:", ", ", ", ", "To save some space you can also do: ", " and then ", ". This alone freed up almost 700mb of space for me.", "This is going to conclude the first part of this tutorial series. In the next tutorial, we're going to cover how we can remotely access our Raspberry Pi.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t", "Contact: Harrison@pythonprogramming.net.", "Programming is a superpower."]},
{"url": "https://pythonprogramming.net/community/789/Python%20query%20on%20Group%20by%20and%20Indexing/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["Python query on Group by and Indexing"], "p": ["You must be logged in to post. Please ", " or ", " an account.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/785/Get%20the%20variable%20name%20of%20a%20variable%20as%20a%20string/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["Get the variable name of a variable as a string"], "p": ["You must be logged in to post. Please ", " or ", " an account.", "You must be logged in to post. Please ", " or ", " an account.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/791/Heart-felt%20thank%20you/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["Heart-felt thank you"], "p": ["You must be logged in to post. Please ", " or ", " an account.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/790/How%20to%20land%20rocket%20stages%20with%20Python%20in%20Kerbal%20Space%20Program/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["How to land rocket stages with Python in Kerbal Space Program"], "p": ["You must be logged in to post. Please ", " or ", " an account.", "You must be logged in to post. Please ", " or ", " an account.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/data-analysis-tutorials/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["Employ both supervised and unsupervised machine learning, to make predictions or to understand data.", "Use Python with Pandas, Matplotlib, and other modules to gather insights from and about your data.", "Using Matplotlib, graphically display your data for presentation or analysis.", "Devise, create, test, and deploy automated algorithmic trading strategies in the financial markets.", "From launching a simple virtual machine to deploying advanced machine learning APIs with Python.", "Analyze video and images with your machine to program tasks like face and object recognition.", "Use MPI with machines to do distributed and parallel computing tasks.", "Teach machines to read, understand, and analyze human natural language.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/opengl-rotating-cube-example-pyopengl-tutorial/", "h1": [], "h2": ["OpenGL with PyOpenGL introduction and creation of Rotating Cube", "Login", "Sign up"], "h3": [], "p": ["When I first began looking into OpenGL with Python, my main goal was to figure out how to make a rotating cube. I don't think I am alone, since this seems to be the pinnacle of understanding the basics of OpenGL. As such, I have compiled this first video to include everything from acquiring ", ", ", ", and ", ", to creating the necessary code to make a rotating cube. This first tutorial is quite long, but I wanted to go ahead and put everything into this video. I had a very hard time figuring out OpenGL, mainly because most of the OpenGL with PyOpenGL tutorials that I could find were clearly written for someone who already knew OpenGL. I did not, so this was a massive hurdle for me. Hopefully I can help you all learn it much faster than I did.", "First off, PyOpenGL is just some Python bindings (some Python code that acts like a sort of wrapper around native code), so you can manipulate OpenGL within the context of Python. OpenGL is a cross-language API, so you can take your knowledge of OpenGL to other languages.", "So, the way OpenGL works is you just specify the objects within space. For a cube, for example, you specify the \"corners.\" Corners are referred to as vertices (plural) or as a vertex (singular). You may also see them referred to as a node (singular) or nodes (plural).", "Once you define the vertices, you can then do things with them. In this example, we want to draw lines between them. Defining the vertices is done with a simple list or tuple in Python. You can then pre-define some rules like what vertices make up a \"surface\" and between what vertices are the \"edges,\" or lines that we want to have drawn between the vertices.", "Once you do that, then you're ready to write the OpenGL code. To do this, you have glBegin and glEnd statements that you call, and between these is where the OpenGL-specific code goes. In the glBegin statement, you specify the \"type\" of code that you are about to pass. These are constants, and contain things like GL_QUADS or GL_LINES. This basically notifies OpenGL how you want it to handle your statements.", "So that's the abstract concept of how OpenGL works, let's go ahead and do it!", "First, you will need to have the following:", "If you are a Windows user, then I highly recommend downloading PyGame and PyOpenGL from this source of ", ". Just save that link to your bookmarks. Super useful website.", "Once you have everything, go ahead and open up IDLE and type in:", "If you can type those statements and run them without any errors, then you are ready to proceed. If you are getting errors, something went wrong. Most of the time, the error is either you've downloaded the wrong Python version of PyGame or OpenGL, or the wrong bit version. So, if you are using 32 bit Python, you need to use 32 bit modules, and so on. Even if your operating system is a 64 bit OS, you may still find you're running a 32 bit version of Python. I highly recommend using 64 bit Python if you can, 32 bit is limited to 2GB of ram, which is quite the limitation. If you have a 32 bit OS, then you cannot use 64 bit.\n\n", "Alright, now let's get into the code! If you still have the import pygame and import OpenGL code, erase that and start completely blank.", "First, we're going to do some imports:", "We're importing all of PyGame here, and then all of the PyGame.locals. This is some typical PyGame code. If you want to learn a bunch more about PyGame, check out the ", " I offer here.", "Next, we import OpenGL.GL and OpenGL.GLU. OpenGL.GL is just your typical OpenGL functions, then OpenGL.GLU is some of the more \"fancy\" OpenGL functions.", "For the first few videos, I go ahead and miss-spell vertices. Oops.", "Here, we've defined the location (x,y,z) of each vertex. I think it is best to envision this in \"units.\" Try to think of these locations \"spatially.\" With a cube, there are 8 \"nodes\" or vertices.", "Next, we're ready to define the edges:", "Each of the above tuples contains two numbers. Those numbers correspond to a vertex, and the \"edge\" is going to be drawn between those two vertices. We start with 0, since that's how Python and most programming languages work (the first element is 0). So, 0 corresponds to the first vertex we defined (1, -1, -1)... and so on.", "Now that we've got that, let's work on the required code to work with OpenGL to actually generate a cube:", "First, we start off our function as we would any other function.", "Next, since this is just a function containing OpenGL code, we go ahead and open with a glBegin(GL_LINES), this notifies OpenGL that we're about to throw some code at it, and then the GL_LINES tells OpenGL how to handle that code, which, in this case, means it will treat the code as line-drawing code.", "From there, we say for edge in edges, which corresponds to each pair of vertices in our edges list. Since each edge contains 2 vertices, we then say for vertex in edge, do glVertex3fv(vertices[vertex]), which performs the glVertex3fv OpenGL function on the [vertex] element of the vertices tuple.", "As such, what ends up being passed through OpenGL with the constant of GL_LINES is:", "glVertex3fv((1, -1, -1))", "glVertex3fv((1, 1, -1))", "...and so on. OpenGL, knowing that we're drawing lines here will draw lines between those points.", "After running through all edges, we're done, so we call glEnd() to notify OpenGL that we're done telling it what to do. For each \"type\" of OpenGL code that you plan to use, you will need opening and closing GL commands like this.", "That's it for our cube function. This function will create the cube, but now we want to display the cube and specify our perspective in the environment:", "This is mostly typical PyGame code. If you want to understand it more, check out the ", ".", "The only major difference here is we're adding another \"parameter\" looking thing after \"display\" in the pygame.display.set_mode. These are actually constants, notifying PyGame that we're going to be feeding it OpenGL code, as well as DOUBLEBUF, which stands for double buffer, and is a type of buffering where there are two buffers to comply with monitor refresh rates. Take note that pipe (\"|\") that is used to separate constants. It will be used again later to separate constants.", "Next, within this main() function:", "gluPerspective is code that determines the perspective, as it sounds. The first value is the degree value of the field of view (fov). The second value is the aspect ratio, which is the display width divided by the display height. The next two values here are the znear and zfar, which are the near and far clipping planes.", "What in the heck is a clipping plane? If you're like me, that means nothing to you at this point. Basically, a clipping plane is at what distance does the object appear/disappear. So the object will only be visible between these two values, and both values are supposed to be positive, because they are in relation to your perspective, not in relation to your actual location within the 3D environment.", "So, we're having the close clipping happening at 0.1 units and the far clipping plane as 50.0 units away. This will make more sense later, once we've displayed the cube and we can control where we are in the 3D environment, then you will see the clipping planes in action.", "Next up, we have:", "glTranslatef, officially \"multiplies the current matrix by a translation matrix.\" OK cool, again that means nothing to me. So, in layman's terms, this basically moves you, and the parameters are x, y and z. So above, we're moving back 5 unites. This is so we can actually see the cube when we bring it up. Otherwise, we'd be a bit too close. ", "Now let's write our typical event loop for PyGame. Again, if you want to learn more, check out the aforementioned tutorial. ", "This is a simple PyGame event loop that is only checking for any exit, which is only looking for the literal \"x\" out. Continuing under this \"while\" statement:", "glRotatef multiplies the current matrix by a rotation matrix. The parameters here are angle, x, y and z. ", "Then we have glClear, which is like any other clearing function. We specify a couple of constants here, which is telling OpenGL what exactly we're clearing. ", "Once we have a clean \"canvas\" if you will, we then call our Cube() function. ", "After that, we call pygame.display.flip(), which updates our display. ", "Finally we throw in a short wait with pygame.time.wait(10). ", "That's it for our main function, and now we just call a main() at the end to make it all work. Just in case you got lost somewhere, here's the entire script put together:", "The end result should be:", "Awesome and congratulations on your PyOpenGL cube! There is obviously a lot more to learn, and some of these functions may not make too much sense just yet. I'll be going over those a bit more in depth soon.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/kivy-application-development-tutorial/", "h1": [], "h2": ["Kivy with Python tutorial for Mobile Application Development Part 1", "Login", "Sign up"], "h3": [], "p": ["Welcome to the introduction to ", " tutorial. First off, what is Kivy? Kivy is a multi-platform application development kit, using Python.", "This means Kivy runs on iOS, Android, MacOS, Windows, and Linux! That's quite a bit! What's more is, not only does it run across the board like this, but you can also take advantage of multi-touch, which is common on mobile devices.", "With Kivy, you can also access mobile APIs, like the Android API to manipulate things like the camera on a phone, the gyro sensor, GPS, vibrator, and so on.", "I assume you already have Python. If you're new to Python, you should probably ", " first.", "Convinced? Great, let's get Kivy!", "In order to use Kivy, you're going to also need PyGame, and likely Cython down the road, though we'll leave that out for now.", "Since PyGame is a dependency of Kivy, we'll grab that first. PyGame is one of the original packages for creating games in Python. There is a ", " here on this website as well, if you are particularly interested in Game development.", "In order to get PyGame, and then Kivy, we're going to use pip. So long as you have a recent version of either Python 2 or Python 3, you already have pip on your system. This tutorial is done with Python 3, though you should be able to follow along with Python 2.", "Open bash or cmd.exe, and do:", "That should be it. Are you having trouble with pip? I have a more in-depth tutorial on how to use pip and how to handle various things like 64 bit requirements and if pip is not in your path:", "If you need help with pip, check out the ", ".", "Once you have Kivy installed successfully, you're ready to begin your first basic program!", "Kivy handles a lot of the back-end requirements for you. For things like where the mouse is, how a button should react when clicked, or, even how to manage multiple screens, Kivy has your back!", "Kivy App import, followed by a requirement for a Kivy version. This isn't required, but necessary if you're using new features of Kivy. Finally, we pull Label from Kivy's UIX packages.", "Now we create our main application, called SimpleKivy. We're inheriting from Kivy's App class. Our build method is an expected method for Kivy. Within our build, we're just returning a simple Label, which is just displaying \"Hello World.\"", "Confused by \"class\" or Object Oriented Programming? OOP makes the most sense in most cases when creating things like interactive GUIs (graphical user interfaces) or Games. OOP can be a bit confusing, though it doesn't have to be! If you're confused about OOP, check out the ", ".", "Now we run the code. ", "That's all there is to it. You should get the following when you run the application:", "One of the things that makes Kivy a superb module is the documentation. Kivy offers ", " on their website which is very well done, but Kivy also has extensive commenting within the actual Python module itself. It might be the most documentation that I've ever seen. If you want to know, for example, what you can do with this \"Label,\" why not check it out in the module? To do this, do you know where to look?", "Third-party modules are *usually* stored in the /Lib/site-packages/ directory of your Python installation. If you're having trouble finding it, however, you can usually get by doing something like:", "That will give you the location of a module, which, for me, is:", "That's at least where the __init__.py is, but we're mostly interested in looking in the Kivy directory. Let's head there!", "We see that we imported the \"Label\" from kivy.uix.label, so we can assume we'll find Label within kivy/uix/label.py.", "Sure enough, there it is. Open it up to edit it, and just look at all those options...and all that commenting! Far more commenting than code. So, if you're interested in learning more about Kivy and the aspects of it, just browse your installation, or poke about their documentation!", "For us, we're now ready to move on!", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/django-web-development-with-python-intro/", "h1": [], "h2": ["Django Web Development with Python Introduction", "Login", "Sign up"], "h3": [], "p": ["Welcome to a Django web development with Python tutorial series. ", " is a ", " web development framework, aimed at rapid development and deployment.", "One of the more common questions people have is \"which framework\" they should use. There are quite a few for Python, with Django and Flask being the two most popular.", "Flask is more of what we call a \"micro\" web framework. It is much \"lower level\" than Django is. This allows for more customization and control for the developer.", "Django is much more of a higher-level framework, and imposes a set structure on the developer.", "Thus, with Flask you can create systems your way, which is probably not most efficient, fastest, or secure way. With Django, you are a bit more constrained, but you are going to most likely do it the best way possible. As with almost all questions people ask me regarding which to use, the answer is: Try a few, and choose the one you like best. In the end, Django and Flask can be used to make the exact same websites!", "To try Django, you need to get Django first (you will also need Python installed). This is exceptionally simple:", "Problems? Check out the ", ".", "You can also install a very specific version. I will be using 1.9 for this tutorial series. If you wanted to use that exact version:", "Now you're ready to begin. It can take some time to digest the paradigm used by Django, but the way it works at the most macro level is you have an overall project, and then within the project, you have various apps, which you can call upon, using them in one or even multiple projects/websites. For example, you may make blog app that you use on a bunch of your websites for their blog sections, following the DRY (Don't Repeat Yourself) principle.", "The main project has a ", " file that dictates the URLs that lead to the apps, and then the apps themselves have their own ", ", that dictates URLs from there. This concept was very foreign to me initially, but it actually makes a whole lot of sense. For example, your main project's ", " would have a pointer to /blog/ for the blog app, then your blog app would have its own directions for, say, /authors/ in its ", ". What is neat about this, is on one website, you might have many things, and a blog. Maybe you are running a business, so you point your main project to /blog/, and then the authors would be yourwebsite.com/blog/authors/. Then, using that exact same app, you could have another website that is just a blog, where the app location for the blog app is just / (the index), but the app's ", " definitions need not change. yourwebsite.com/authors/ will work here. What's more, this means you can extremely easily implement other people's apps.", "Generally when I am working with large frameworks like this, the first task I always have is to actually make something appear successfully. Until then, I am not really sure I get it at all, so let's get a page to display some text for us. The first step here is for us to create a project. Navigate via the terminal or command prompt to an area where you want to work on your project, then do:", "This will create a directory called mysite. Within that directory, you have another one called mysite, along with a manage.py file. The manage.py file lets you easily interact with your project via the command line. The contents of the second mysite directory contain your settings and urls mainly. Broken down:", "The paradigm of Django is that either a website is an app, or a collection of apps in most cases. We currently have our website, called \"mysite\" for now. Now we need an app, which is what we're going to be covering in the next tutorial. For now, run the following via the command line or terminal: ", ". This runs the local development server, which you can reach at http://127.0.0.1:8000. Head there and you should see the \"it worked\" message. If not, check out the error and try to debug. Also check out the ", " if you're having installation issues.", "Download the entire site's code for this tutorial here: ", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/page/2/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/forgot-password/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/register", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["By registering, you accept the ", " and ", "\n\t\t\t", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/795/Cuffmerge%20SyntaxError%20invalid%20syntax/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["Cuffmerge SyntaxError invalid syntax"], "p": ["You must be logged in to post. Please ", " or ", " an account.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/788/Can%20I%20use%20my%20laptop%20to%20make%20and%20train%20Haar%20Cascade/?/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["Can I use my laptop to make and train Haar Cascade?"], "p": ["You must be logged in to post. Please ", " or ", " an account.", "You must be logged in to post. Please ", " or ", " an account.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/basic-gui-pyqt-tutorial/", "h1": [], "h2": ["PyQT Basic Tutorial", "Login", "Sign up"], "h3": [], "p": [" is a Python wrapper around the ", " for creating graphical user interfaces, or GUIs.", "This tutorial is written in PyQt4, but there is a newer version, PyQt5, that you can use. There are some differences, and ", " has ported this series code, by individual tutorial code, to PyQt5 ", ".", "First, we need to go ahead and get PyQT4. To do this, if you are on Windows, head to: ", ".", "If you are on Mac or Linux, then you should be able to just do:", "You can also get a wheel file for pip installation at:\nhttp://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4", "Once you have PyQT, let's create a simple application.", "First, we'll need some basic imports:", "We will use sys shortly just in case we want our application to be able to accept command line arguments, but also later on to ensure a nice, clean, close of the application when we want to exit. ", "Next:", "Here, we're importing QtGui, which deals with all things GUI with PyQT. Now some of you may be thinking \"isn't all PyQT GUI stuff?\" Nope, PyQT does a lot of other things besides just GUIs, and QtGui is purely just the graphical stuff. All of the PyQT sections are:", "Next, we need some sort of application definition:", "We are creating a QApplication object, and saving it to \"app.\" Here, we pass this sys.argv argument because sys.argv allows us to pass command line arguments to the application. For more information on this, see our ", ".", "Next, we define our window. Now this can sometimes be a little confusing. With GUIs, you generally have what is referred to as the \"application,\" or the \"frame,\" and then you have the \"window\" or the actual \"gui\" part. The frame is just the encapsulation of the window, literally on the screen, as well as in the background. You will probably better understand this as time goes on, but think of \"application\" as literally the border that goes around your window.", "Here, we can modify the window a bit. Keep in mind, that applications and their windows are created in memory first, then they are brought to the user's screen last. This is the same process that you see done with other forms of Graphics in programming, like games with PyGame, or graphing with Matplotlib. The reason for this is graphical rendering is cumbersome, and it would be rather inefficient to continuously be making edits and refreshing to the user's screen for each element. So, when we modify the window like this, it is not like the window will pop up full screen, and then change shape moments later. The screen has not yet been shown to the user, we're just building it in the memory.", ".setGeometry is a method that belongs to a few methods, but here the method is the QtGui.QWidget class. It is taking four parameters from us. First you have the window's starting x coordinate, then you have the starting y coordinate (0 and 0). Next, you have the window's dimensions, which are 500 and 300, meaning 500 pixels wide and 300 tall. ", "Next, we can do something like:", "This method simply sets the window's title to what we choose.", "Finally, once we're content with the GUI that we have built, we invoke:", ".show() brings the window to the screen for the user. \".show()\" is a QT method.", "Full code for this:", "So now you have a very basic GUI application. Now that you see the fundamentals of how a GUI with QT works, we're going to talk about how to lay the foundation for a full application next.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/tkinter-depth-tutorial-making-actual-program/", "h1": [], "h2": ["Programming GUIs and windows with Tkinter and Python Introduction ", "Login", "Sign up"], "h3": [], "p": ["Hello and welcome to my Tkinter mega-series, where I walk you through the creation of an actual application made with Python and Tkinter.", "Are you just looking for the basics of Tkinter? Check out the miniseries within the ", " here: ", "Many people are under the impression that Python and Tkinter are just plain not suitable for making applications, and I think they are wrong. The problem is no one actually appears to have shown people how to do it, so I will take that upon myself!", "What we're going to be making here is a trading application for Bitcoin. The application will mainly:\n", "This will keep us busy enough, and even these four things are very in-depth. The main concern with using Python for this application is resource allocation. Python naturally is single-threaded, and very linear. If any one single operation is taking a while to occur, the entire application will halt while that operation is in process. This is a huge downside, and the main reason people immediately discount Python for creating all sorts of programs, including GUI applications. This is a shame, since you can very easily thread Python, and do many other things. We wont be able to utilize GPU processing here, but that is another option as well, but it would severely limit the amount of people who would be able to use the application (limiting to people with CUDA enabled Nvidia GPUs).", "While all of this might sound very confusing and daunting, what I plan to do is hold your hand through the entire process, explaining everything at every step of the way. If you ever get lost, you can always comment on the matching YouTube tutorial video that is included in each section, and I will be happy to assist you.", "With that, let's get started!", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/introduction-intermediate-python-tutorial/", "h1": [], "h2": ["Intermediate Python Programming introduction", "Login", "Sign up"], "h3": [], "p": ["Welcome to the intermediate Python programming tutorial series. In this series, we're going to be taking the \"next steps\" after one has become comfortable with the basics of Python, and has been working with it for a bit.", "Up to this point, my tutorials have all been done using very basic, rudimentary Python. My definition of basic Python: code that is meant to \"just make it run.\" This is fine for beginners, because there's not much point in overloading with nuances (most people wont retain it, since they don't care, at least I didn't when I was starting out).", "I define intermediate Python code as:", "In general, code that meets the above standards in Python is done with the Object Oriented Programming (OOP) paradigm. There does exist another paradigm, called Functional Programming (FP), and there are bloody wars fought over which is better. We're going to use OOP. Either one of these is better than outright scripting, which what most beginner programmers are really doing.", "To begin this series, I am going to teach a few basic standard library functions and functionalities of Python that will replace otherwise bad habits in programming, before getting into Object Oriented Programming and design.", "In this introduction, I will point you towards ", ". PEP 8 is a guide for Python styling. Things like white spaces, indentation, naming conventions, and more. PEP 8 is a guide, not a bible.", "Finally, as we go through this series, it's a good idea to keep in mind \"The Zen of Python\" by Tim Peters:", "In the next tutorial, we're going to talk about string concatenation and string formatting.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t", "Contact: Harrison@pythonprogramming.net.", "Programming is a superpower."]},
{"url": "https://pythonprogramming.net/practical-flask-introduction/", "h1": [], "h2": ["Introduction to Practical Flask", "Login", "Sign up"], "h3": [], "p": ["Welcome to the practical Flask tutorial series. This series is dedicated to creating an actual website from scratch. We're going to clone PythonProgramming.net, which actually is written in Flask. Creating PythonProgramming.net includes:", "It is recommended that you understand the basics of how HTML works as well as the basics of how Python works. Other than that, you should be able to follow along.", "The first thing you will need is some sort of a server. You can host a Flask application locally if you want. If you're using a Windows OS, operating a local MySQL database is going to be a challenge if you're a beginner, but you're free to try. We're going to show how to develop on an actual web server, though it is highly suggested by me that you do not develop and test on your live sever.", "Developing on your live server is a bad idea because it will cause a lot of disruptions to your users and is also highly likely to expose security bugs live, even if for only a short time.", "If you follow the video, we set up our web server via ", ".", "My preferred host is actually ", ", though their cheapest server is $10/mo, compared to Digital Ocean's $5. I use both hosts fairly heavily, spending triple digits at both. All of my smaller servers go to Digital Ocean, but all of my major websites that require larger servers go to Linode.", "Use whichever you want, or develop locally. Picking and buying a server is similar across VPS hosts. From there, we're going to be working with Ubuntu 14.10. You should have no problem working with future versions of Ubuntu as well.", "To interact with your server, and to easily follow along with this tutorial series, it is recommended that you have an SSH client for running commands on your server, as well as some sort of remote file managing client. Some suggestions I have:", "For ", ", file management with a GUI can be done with FileZilla or WinSCP. Putty is an SSH client for Windows.", "For ", ", you can just type ssh username@hostname  in your terminal for SSH access. FileZilla works for a file management GUI on Mac OS and Linux as well, though there are many other options for this. It is mostly Windows users who don't have many choices. ", "Once you have the server, you will want to run:", "Once that is done, you're ready to move on to the next video.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/pygame-python-3-part-1-intro/", "h1": [], "h2": ["Introduction to PyGame", "Login", "Sign up"], "h3": [], "p": ["Welcome to the introduction to PyGame and Python 3 video game programming! ", "You may wish to be familiar with the basics of the Python 3 programming language, or at least the basics of Programming in general", "That said, this course begins at a slowish pace, and I do my best to explain everything at least the first time it shows up. PyGame can actually be a wonderful starting place for your journey in Python.", "Don't be afraid to ask questions!", "Game creation in any programming language is very rewarding, and also makes for a great teaching tool. With game development, you often have quite a bit of logic, mathematics, physics, artificial intelligence, and other things, all of which come together for game creation. Not only this, but the topic is games, so it can be very fun.", "Many times people like to visualize the programs they are creating, as it can help people to learn programming logic quickly. Games are fantastic for this, as your are specifically programming everything you see.", "First, you're going to need ", "!", "Installation may vary by operating system. Macs historically have had trouble with PyGame, so you may need to get an earlier version of Python and PyGame.", "Nowadays, ", " is probably the best method for installing PyGame, since it comes with the latest versions of Python 2 and Python 3.", "Here's a quick tutorial for using pip to install packages:", "Once you have that, you're ready to create your very first PyGame instance!", "Above, we've imported PyGame, which is obviously necessary to make use of the module! Then, we run pygame.init(), which is integral to every single PyGame application that you will ever write. This will initiate PyGame, and allow you to then make various commands with PyGame and our game.", "Next, we define our game's display, which is the main \"display\" for our game. You may also see this referred to as a \"surface,\" as this is basically our canvas that we will draw things to, and the function literally returns a pygame.Surface object. We are saying right now that we want the resolution of our game to be 800 px wide and 600 px tall. Take note that this is a tuple as a function argument. If you do not make this a tuple with parenthesis, then 600 and 800 will be treated as separate parameters and the function will blow up. It's a big deal.", "After that, we define our display's \"caption.\" To me, it's more like a title, and is the title of the window. We've decided to call our game \"A bit Racey.\" (tm!)", "Simple enough, this is a our game clock. We use this to track time within the game, and this is mostly used for FPS, or \"frames per second.\" While somewhat trivial seeming, FPS is very important, and can be tweaked as we will see later. For the most part, the average human eye can see ~30 FPS. It's important to note, however, that this is only a very general statement, since every human eye is slightly different, and the human eye does not process things in \"frames.\" The better way to put it is that after about 30 FPS, people generally cannot tell the difference.", "Take that 60 FPS YouTube. Anyway, we can increase FPS to literally speed up the game, or slow them down to slow down the game. This isn't ideal, especially when speeding up FPS, as the entire game loop is run per frame, and might be a massive waste of processing. More on this later though!", "Okay, a bit more here. I don't like to separate loops and functions if I don't have to, since it can cause people to get indentation wrong. So, first, we've got a crashed = False statement, which is just a variable that we set initially. Then, we run our \"game loop,\" which will run until we crash. Currently, the only way we're saying crashed = True is if the user exits out of the window, however.", "You'll notice here that we have a for loop within this while loop. This is going to be present in most PyGame scripts, where events are constantly being logged. It is shown in the video, but not here, but you can still try it: Try adding \"print event\" above the if statement. You will see in your console everything you do within the PyGame window. Pretty neat!", "After our if statement. you'll see that we run a pygame.display.update. It's important to note the difference between display.update and display.flip. Display.flip will update the entire surface. Basically the entire screen. Display.update can just update specific areas of the screen. That said, if you do not pass a parameter, then update will update the entire surface as well, bascially making flip() pointless for our interests. There might come times when you want to use flip for very specific tasks, however.", "The last thing within this while loop is clock.tick(60). Basically, this is how many frames per second we are running. In this case, we are running 60 FPS.", "Once we have broken our game loop, we want to run a pygame.quit(). This will end our pygame instance. Then we can run a simple quit(), which will exit Python and the application.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/introduction-to-python-programming/", "h1": [], "h2": ["Python 3 Programming Introduction Tutorial", "Login", "Sign up"], "h3": [], "p": ["Chances are, if you're viewing this page, you're brand new to Python.", "You might even be new to Programming all-together. Either way, \n\t\tyou have come to the right place, and chosen the right language!", "Python is very beginner-friendly. The syntax (words and structure) is extremely simple to read and follow, most of which can be understood even if you do not know any programming. Let me show you:", "\"print()\" is a built-in Python function that will output some text to the ", ".", "When someone says to \"print to the console,\" they are referring to where information from your program is ouput. This might be a command prompt (CMD.exe), the terminal for Mac/Linux users, or the interactive prompt in IDLE. You will see an example of \"output to console\" below.", "Looking at the code about cars in the garage, can you guess what will happen? You probably have a general idea. For each_car in the garage, we're going to do something. What are we doing? We are printing each car.", "Since \"printing\" outputs some text to the \"console,\" you can probably figure out that the console will say something like \"Ferrari, Honda, Porsche, Toyota.\"", "Python is a fully-functional programming language that can do ", " almost any other language can do, at comparable speeds.", "Python is capable of threading and GPU processing just like any other language. Most of the data processing ", " are actually just Python ", " around C/C++ code.", "\"Modules\" are pre-written Python code that you \"import\" in your Python program. Since there are many tasks that people commonly do, we have modules that people have written that do these taks for you, and they usually do them in the cleanest and most efficient method possible. Sometimes you will see people refer to \"DRY.\" This stands for Don't Repeat Yourself, which often also translates into \"Don't Repeat Someone Else.\"", "The phrase \"wrapper\" means that someone has placed, like a wrapper, Python code over another language. So, when you have a Python wrapper around C++ code, what someone has done is written some Python code that interacts with the C++ language. This allows you to make use of various aspects of the language being wrapped, in this case C++, without actually needing to know or understand that language.", "Thus, Python can be used to make games, do data analysis, control robot and hardware, create ", ", or even to create websites.", "\"GUI\" stands for Graphical User Interface, and is used to describe a program that incorporates graphics to make the program more interactive for the user.", "99% of the code that brings this very page to you is actually Python code!", "If you're curious to see some examples of what you can do with Python code, browse around the topics in the ", ".", "The ", " is a collection of topics and tutorials offered here on PythonProgramming.net, as well as progress-tracking and suggestions for logged-in users. Guests can still navigate the Dashboard.", "Congratulations, you have finished the first of many tutorials on the topic of Python. I recommend you ", " before proceeding so that this page is marked as complete.", "Using the button to get to the next tutorial will successfully mark this one as \"complete\", if you are logged in. ", "To install Python, you will need to head to ", ", or view the Python installation tutorial video. You can also install Python via a pre-compiled Python distribution, like ", ". One of the common headaches and hang-ups for people starting out with Python is dealing with installing modules, so a pre-compiled version of Python that comes with a bunch of the popular packages can just simply make your life easier. We will eventually be covering how to install modules as well in this series.", "You can either head on to the ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/about/privacy-policy/", "h1": ["Privacy Policy"], "h2": ["Login", "Sign up"], "h3": [], "p": ["Last updated: January 27, 2016", "PythonProgramming (\"us\", \"we\", or \"our\") operates the http://pythonprogramming.net website (the \"Service\").", "This page informs you of our policies regarding the collection, use and disclosure of Personal Information when you use our Service.", "We will not use or share your information with anyone except as described in this Privacy Policy.", " Unless otherwise defined in this Privacy Policy, terms used in this Privacy Policy have the same meanings as in our Terms and Conditions, accessible at https://pythonprogramming.net/about/tos/", "While using our Service, we may ask you to provide us with certain personally identifiable information that can be used to contact or identify you. Personally identifiable information may include, but is not limited to, your email address, name (\"Personal Information\").", "We collect this information for the purpose of providing the Service, identifying and communicating with you, responding to your requests/inquiries, servicing your purchase orders, and improving our services.", "We collect information that your browser sends whenever you visit our Service (\"Log Data\"). This Log Data may include information such as your computer's Internet Protocol (\"IP\") address, browser type, browser version, the pages of our Service that you visit, the time and date of your visit, the time spent on those pages and other statistics.", "In addition, we may use third party services such as Google Analytics that collect, monitor and analyze this type of information in order to increase our Service's functionality. These third party service providers have their own privacy policies addressing how they use such information.", "Cookies are files with a small amount of data, which may include an anonymous unique identifier. Cookies are sent to your browser from a web site and transferred to your device. We use cookies to collect information in order to improve our services for you.", "You can instruct your browser to refuse all cookies or to indicate when a cookie is being sent. The Help feature on most browsers provide information on how to accept cookies, disable cookies or to notify you when receiving a new cookie.", "If you do not accept cookies, you may not be able to use some features of our Service and we recommend that you leave them turned on.", "Google, as a third party vendor, uses cookies to serve ads on our Service. Google's use of the DoubleClick cookie enables it and its partners to serve ads to our users based on their visit to our Service or other web sites on the Internet.", "You may opt out of the use of the DoubleClick Cookie for interest-based advertising by visiting the ", " web page.", "We do not support Do Not Track (\"DNT\"). Do Not Track is a preference you can set in your web browser to inform websites that you do not want to be tracked.", "You can enable or disable Do Not Track by visiting the Preferences or Settings page of your web browser.", "We may employ third party companies and individuals to facilitate our Service, to provide the Service on our behalf, to perform Service-related services and/or to assist us in analyzing how our Service is used.", "These third parties have access to your Personal Information only to perform specific tasks on our behalf and are obligated not to disclose or use your information for any other purpose.", "We may use your Personal Information to contact you with newsletters, marketing or promotional materials and other information that may be of interest to you. You may opt out of receiving any, or all, of these communications from us by contacting us.", "We will disclose your Personal Information where required to do so by law or subpoena or if we believe that such action is necessary to comply with the law and the reasonable requests of law enforcement or to protect the security or integrity of our Service.", "The security of your Personal Information is important to us, and we strive to implement and maintain reasonable, commercially acceptable security procedures and practices appropriate to the nature of the information we store, in order to protect it from unauthorized access, destruction, use, modification, or disclosure.", "However, please be aware that no method of transmission over the internet, or method of electronic storage is 100% secure and we are unable to guarantee the absolute security of the Personal Information we have collected from you.", "Your information, including Personal Information, may be transferred to - and maintained on - computers located outside of your state, province, country or other governmental jurisdiction where the data protection laws may differ than those from your jurisdiction.", "If you are located outside United States and choose to provide information to us, please note that we transfer the information, including Personal Information, to United States and process it there.", "Your consent to this Privacy Policy followed by your submission of such information represents your agreement to that transfer.", "Our Service may contain links to other sites that are not operated by us. If you click on a third party link, you will be directed to that third party's site. We strongly advise you to review the Privacy Policy of every site you visit.", "We have no control over, and assume no responsibility for the content, privacy policies or practices of any third party sites or services.", "Only persons age 18 or older have permission to access our Service, or if a legal guardian or parent of the user gives consent. Our Service does not address anyone under the age of 13 (\"Children\").", "We do not knowingly collect personally identifiable information from children under 13. If you are a parent or guardian and you learn that your Children have provided us with Personal Information, please contact us. If we become aware that we have collected Personal Information from a children under age 13 without verification of parental consent, we take steps to remove that information from our servers.", "This Privacy Policy is effective as of January 22, 2015 and will remain in effect except with respect to any changes in its provisions in the future, which will be in effect immediately after being posted on this page.", "We reserve the right to update or change our Privacy Policy at any time and you should check this Privacy Policy periodically. Your continued use of the Service after we post any modifications to the Privacy Policy on this page will constitute your acknowledgment of the modifications and your consent to abide and be bound by the modified Privacy Policy.", "If we make any material changes to this Privacy Policy, we will notify you either through the email address you have provided us, or by placing a prominent notice on our website.", "If you have any questions about this Privacy Policy, please contact Harrison@pythonprogramming.net.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/data-analysis-python-pandas-tutorial-introduction/", "h1": [], "h2": ["Data Analysis with Python and Pandas Tutorial Introduction", "Login", "Sign up"], "h3": [], "p": ["Need help installing packages with pip? see the ", "ActiveState is a PythonProgramming.net sponsor.", "What is going on everyone, welcome to a Data Analysis with Python and Pandas tutorial series. Pandas is a Python module, and Python is the programming language that we're going to use. The Pandas module is a high performance, highly efficient, and high level data analysis library.", "At its core, it is very much like operating a headless version of a spreadsheet, like Excel. Most of the datasets you work with will be what are called dataframes. You may be familiar with this term already, it is used across other languages, but, if not, a dataframe is most often just like a spreadsheet. Columns and rows, that's all there is to it! From here, we can utilize Pandas to perform operations on our data sets at lightning speeds.", "Pandas is also compatible with many of the other data analysis libraries, like Scikit-Learn for machine learning, Matplotlib for Graphing, NumPy, since it uses NumPy, and more. It's incredibly powerful and valuable to know. If you're someone who finds themselves using Excel, or general spreadsheets, for various computational tasks, where they might take a minute, or an hour, to run, Pandas is going to change your life. I've even seen versions of Machine learning like K-Means clustering being done on Excel. That's really cool, but my Python is going to do that for you way faster, which will also allow you to be a bit more stringent on parameters, have larger datasets and just plain get more done.", "Another bit of good news? You can easily load in, and output out in the xls or xlsx format quickly, so, even if your boss wants to view things the old way, they can. Pandas is also compatible with text files, csv, hdf files, xml, html, and more with its incredibly powerful IO.", "If you're just now joining us with Python, you should be able to follow along without already having mastered Python, and this could even be your intro to Python in general. Most importantly, if you have questions, ask them! If you seek out answers for each of the areas of confusion, and do this for everything, eventually you will have a full picture. Most of your questions will be Google-able as well. Don't be afraid to Google your questions, it wont laugh at you, I promise. I still Google a lot of my goals to see if someone has some example code doing what I want to do, so don't feel like a noob just because you do it.", "If I have not sold you yet on Pandas, the elevator pitch is: Lightning fast data analysis on spreadsheet-like data, with an extremely robust input/output mechanism for handling multiple data types and even converting to and from data types.", "Alright, you are sold. Now let's get Pandas! \nFirst, I am going to assume some people do not even have Python yet. By far the easiest choice is to go with a pre-compiled distribution of Python, such as ", ", which is quick and simple way to get all of the packages and dependencies you need for data science in a bundle, without the headache of installing them one-by-one, especially on 64 bit Windows. I recommend getting the latest version of 64 bit Python. In this series alone, we're using Pandas, which requires Numpy. We'll also be using Matplotlib and Scikit-Learn, all of which come with ActivePython pre-compiled and optimized with MKL. You can download a fully setup Python distribution from ActiveState ", ".", "If you want to manually install Python, head to Python.org, and download Python 3+, or later. Just don't get 2.X. Take note the bit-version that you download. Just because your operating system is 64 bit, it doesn't mean that's your Python version. The default is always 32bit. Choose what you want. 64 bit can be a bit of a headache, so I wouldn't recommend it if you're a newcomer, but 64 bit is ideal for data science so you're not locked into 2GB max of RAM use. If you want to do the 64 bit route, it might help to check out the pip install tutorial, which covers how to handle regular installs as well as the more tricky 64 bit packages. If you're going with 32bit, then don't worry about that tutorial for now.", "So you've got Python installed. Next, go to your terminal or cmd.exe, and type:", ". Did you get a \"pip is not a recognized command\" or something similar? No problem, this means pip is not on your PATH. Pip is a program, but your machine doesn't just simply know where it is unless it is on your PATH. You can look up how to add something to your path if you like, but you can always just explicitly give the path to the program you want to execute. On Windows, for example, Python's pip is located in ", ". Python34 means Python 3.4. If you have Python 3.6, then you would use Python36, and so on.", "Thus, if regular pip install pandas didn't work, then you can do ", "On that note, another major point of contention for people is the editor they choose. The editor really does not matter in the grand scheme of things. You should try multiple editors, and go with the one that suits you best. Whatever you feel comfortable with, and you are productive with. That's what matters most in the end. Some employers are also going to force you to use editor X, Y, or Z in the end as well, so you probably shouldn't become dependent on editor features. With that, I prefer the simple IDLE, so that's what I will code in. Again though, you can code in Wing, emacs, Nano, Vim, PyCharm, IPython, whatever you want. To open IDLE, just go to start, search for IDLE, and choose that. From there, File > New, and boom you have a text editor with highlighting and a few other little things. We'll cover some of these minor things as we go.", "Now, with whatever editor you are using, open it up, and let's write some quick code to check out a dataframe.", "Generally, a DataFrame is closest to the Dictionary Python data structure. If you are not familiar with Dictionaries, there's a tutorial for that. I'll annotate things like that in the video, as well as having links to them in the description and on the text-based versions of the tutorials on PythonProgramming.net", "First, let's make some simple imports:", "Here, we import pandas as pd. This is just a common standard used when importing the Pandas module. Next, we import datetime, which we'll use in a moment to tell Pandas some dates that we want to pull data between. Finally, we import pandas.io.data as web, because we're going to use this to pull data from the internet. Next up:", "Here, we create start and end variables that are datetime objects, pulling data from Jan 1st 2010 to Aug 22nd 2015. Now, we can create a dataframe like so:", "This pulls data for Exxon from the Yahoo Finance API, storing the data to our df variable. Naming your dataframe df is not required, but again, is pretty popular standard for working with Pandas. It just helps people immediately identify the working dataframe without needing to trace the code back.", "So this gives us a dataframe, how do we see it? Well, can can just print it, like:", "So that's a lot of space. The middle of the dataset is ignored, but that's still a lot of output. Instead, most people will just do:", "This prints the first 5 rows of the dataframe, and is useful for debugging and just generally seeing what your dataframe looks like. As you perform analysis and such, this will be useful to see if what you intended actually happened or not. We'll dive more into this later on, however.", "We could stop here with the intro, but one more thing: Data Visualization. Like I said earlier, Pandas works great with other modules, Matplotlib being one of them. Let's see! Open your terminal or cmd.exe, and do ", ". You should already have got it I am prety sure with your pandas installation, but we want to make sure. Now, at the top of your script with the other imports, add:", "Pyplot is the basic matplotlib graphing module. Style helps us quickly make our graphs look good, and style.use lets us choose a style. Interested in learning more about Matplotlib? Check out the ", "!", "Next, below our print(df.head()), we can do something like:", "Pretty cool! There's a quick introduction to Pandas, but nowhere near what is available. In this series, we're going to be covering more of the basics of pandas, then move on to navigating and working with dataframes. From there, we'll touch a bit more on visualization, input and output with many data formats, basic and intermediate data analysis and operations, merging and combining dataframes, resampling, and much more with a lot of realistic examples.", "If you're lost, confused, or need some clarity, don't hesitate to ask questions on the respective videos.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/about/tos/", "h1": ["Terms and Conditions (\"Terms\")"], "h2": ["Login", "Sign up"], "h3": [], "p": ["Last updated: January 22, 2015", "Please read these Terms and Conditions (\"Terms\", \"Terms and Conditions\") carefully before using the http://pythonprogramming.net website (the \"Service\") operated by PythonProgramming (\"us\", \"we\", or \"our\").", "Your access to and use of the Service is conditioned upon your acceptance of and compliance with these Terms. These Terms apply to all visitors, users and others who wish to access or use the Service.", "If you wish to purchase any product or service made available through the Service (\"Purchase\"), you may be asked to supply certain information relevant to your Purchase including, without limitation, your credit card number, the expiration date of your credit card, your billing address, and your shipping information.", "You represent and warrant that: (i) you have the legal right to use any credit card(s) or other payment method(s) in connection with any Purchase; and that (ii) the information you supply to us is true, correct and complete.", "The service may employ the use of third party services for the purpose of facilitating payment and the completion of Purchases. By submitting your information, you grant us the right to provide the information to these third parties subject to our Privacy Policy.", "When you create an account with us, you guarantee that you are above the age of 18, or a Your legal guardian or Your parent gives consent, and that the information you provide us is accurate, complete, and current at all times. Inaccurate, incomplete, or obsolete information may result in the immediate termination of your account on the Service.", "You are responsible for maintaining the confidentiality of your account and password, including but not limited to the restriction of access to your computer and/or account. You agree to accept responsibility for any and all activities or actions that occur under your account and/or password, whether your password is with our Service or a third-party service. You must notify us immediately upon becoming aware of any breach of security or unauthorized use of your account.", "This website uses cookies and tracks some of your actions on the website to provide you with a better service. If you do not wish to be tracked, disable cookies and do not create an account. You can still browse all content without an account and without cookies.", "We reserve the right to refuse service, terminate accounts, remove or edit content, or cancel orders in our sole discretion.", " \n", "It is PythonProgramming's policy to respond to notices of alleged copyright infringement that comply with the Digital Millennium Copyright Act.", "The Service and its original content, features and functionality are and will remain the exclusive property of PythonProgramming and its licensors. The Service is protected by copyright, trademark, and other laws of both the United States and foreign countries. Our trademarks and trade dress may not be used in connection with any product or service without the prior written consent of PythonProgramming.", "Our Service may contain links to third party web sites or services that are not owned or controlled by PythonProgramming.", "PythonProgramming has no control over, and assumes no responsibility for the content, privacy policies, or practices of any third party web sites or services. We do not warrant the offerings of any of these entities/individuals or their websites.", "You acknowledge and agree that PythonProgramming shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such third party web sites or services.", "We strongly advise you to read the terms and conditions and privacy policies of any third party web sites or services that you visit.", "We may terminate or suspend your account and bar access to the Service immediately, without prior notice or liability, under our sole discretion, for any reason whatsoever and without limitation, including but not limited to a breach of the Terms.", "If you wish to terminate your account, you may simply discontinue using the Service.", "All provisions of the Terms which by their nature should survive termination shall survive termination, including, without limitation, ownership provisions, warranty disclaimers, indemnity and limitations of liability.", "You agree to defend, indemnify and hold harmless PythonProgramming and its licensee and licensors, and their employees, contractors, agents, officers and directors, from and against any and all claims, damages, obligations, losses, liabilities, costs or debt, and expenses (including but not limited to attorney's fees), resulting from or arising out of a) your use and access of the Service, by you or any person using your account and password, or b) a breach of these Terms.", "In no event shall PythonProgramming, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect, incidental, special, consequential or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from (i) your access to or use of or inability to access or use the Service; (ii) any conduct or content of any third party on the Service; (iii) any content obtained from the Service; and (iv) unauthorized access, use or alteration of your transmissions or content, whether based on warranty, contract, tort (including negligence) or any other legal theory, whether or not we have been informed of the possibility of such damage, and even if a remedy set forth herein is found to have failed of its essential purpose.", "Your use of the Service is at your sole risk. The Service is provided on an \"AS IS\" and \"AS AVAILABLE\" basis. The Service is provided without warranties of any kind, whether express or implied, including, but not limited to, implied warranties of merchantability, fitness for a particular purpose, non-infringement or course of performance.", "PythonProgramming its subsidiaries, affiliates, and its licensors do not warrant that a) the Service will function uninterrupted, secure or available at any particular time or location; b) any errors or defects will be corrected; c) the Service is free of viruses or other harmful components; or d) the results of using the Service will meet your requirements.", "Some jurisdictions do not allow the exclusion of certain warranties or the exclusion or limitation of liability for consequential or incidental damages, so the limitations above may not apply to you.", "These Terms shall be governed and construed in accordance with the laws of Texas, United States, without regard to its conflict of law provisions.", "Our failure to enforce any right or provision of these Terms will not be considered a waiver of those rights. If any provision of these Terms is held to be invalid or unenforceable by a court, the remaining provisions of these Terms will remain in effect. These Terms constitute the entire agreement between us regarding our Service, and supersede and replace any prior agreements we might have had between us regarding the Service.", "We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material we will provide at least 30 days notice prior to any new terms taking effect. What constitutes a material change will be determined at our sole discretion.", "By continuing to access or use our Service after any revisions become effective, you agree to be bound by the revised terms. If you do not agree to the new terms, you are no longer authorized to use the Service.", "If you have any questions about these Terms, please contact: Harrison@pythonprogramming.net", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/community/792/Python%20Web%20service%20to%20sql%20database%20example/", "h1": [], "h2": ["Login", "Sign up"], "h3": ["Python Web service to sql database example"], "p": ["You must be logged in to post. Please ", " or ", " an account.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/machine-learning-tutorials/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["Learn theory, real world application, and the inner workings of regression, classification, clustering, and deep learning.", "Training Python how to play and do a self-driving car in Grand Theft Auto 5 through machine learning and other statistical approaches.", "Learn how to detect and track objects in images or real time video with TensorFlow.", "Learn how to deploy a support vector machine with Scikit Learn.", "Learn about clustering (unsupervised machine learning) through using Scikit Learn.", "Discover how powerful even a very simple pattern recognition algorithm can be with character recognition.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/finance-tutorials/", "h1": [], "h2": ["Login", "Sign up"], "h3": [], "p": ["Learn how to do finance with Python, from getting data, to manipulating data, to formulating and testing trading strategies.", "Learn how to deploy a support vector machine with Scikit Learn.", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/matplotlib-intro-tutorial/", "h1": [], "h2": ["Introduction to Matplotlib and basic line", "Login", "Sign up"], "h3": [], "p": ["Welcome to a Matplotlib with Python 3+ tutorial series. In this series, we're going to be covering most aspects to the Matplotlib data visualization module. Matplotlib is capable of creating most kinds of charts, like line graphs, scatter plots, bar charts, pie charts, stack plots, 3D graphs, and geographic map graphs.", "First, in order to actually use Matplotlib, we're going to need it!", "If you have a later version of Python installed, you should be able to open cmd.exe/terminal and then run:", "Note: You may need to do ", " if the above shorter version doesn't work.", "If, when importing matplotlib, you get an error something like \"no module named\" and a module name, it means you need to also install that module. A common issue is that people do not have the module named \"six.\" This means you need to pip install six.", "Alternatively, you can head to ", " and install by heading to the downloads section and downloading your appropriate version. Keep in mind that, just because you have a 64 bit operating system, you do not necessarily have a 64 bit version of Python. Chances are, you have 32 bit unless you tried to get 64 bit. Open IDLE and read the top. If it says you have 64 bit, you have 64 bit, if it says 32, then you have 32 bit. Once you have Python installed, you're ready to rumble. You can code this logic however you wish. I prefer to code using IDLE, but feel free to use whatever you prefer.", "This line imports the integral pyplot, which we're going to use throughout this entire series. We import pyplot as plt, and this is a traditional standard for python programs using pylot.", "Next, we invoke the .plot method of pyplot to plot some coordinates. This .plot takes many parameters, but the first two here are 'x' and 'y' coordinates, which we've placed lists into. This means, we have 3 coordinates according to these lists: 1,5 2,7 and 3,4.", "The plt.plot will \"draw\" this plot in the background, but we need to bring it to the screen when we're ready, after graphing everything we intend to.", "With that, the graph should pop up. If not, sometimes it can pop under, or you may have gotten an error. Your graph should look like:", "This window is a matplotlib window, which allows us to see our graph, as well as interact with it and navigate it. You can hover the graph and see the coordinates in the bottom right typically. You can also utilize the buttons. These may be in various locations, but, in the picture above, these are the buttons that are in the lower left corner.", "Home Button", "The home button will help you once you have begun navigating your chart. If you ever want to return back to the original view, you can click on this. Clicking this before you have navigated your graph will do nothing.", "Forward/Back buttons", "These buttons can be used like the forward and back buttons in your browser. You can click these to move back to the previous point you were at, or forward again.", "Pan Axis", "This cross-looking button allows you to click it, and then click and drag your graph around.", "Zoom", "The zoom button lets you click on it, then click and drag a square that you would like to zoom into specifically. Zooming in will require a left click and drag. You can alternatively zoom out with a right click and drag.", "Configure Subplots", "This button allows you to configure various spacing options with your figure and plot. Clicking it will bring up:", "Each of those blue bars is a slider, which allows you to adjust the padding. Some of these wont do anything right now, because there aren't any other subplots. Left, bottom, right, and top adjust the padding of the figure from the edge of the window. Then wspace and hspace correspond to when you have multiple subplots, and this will act like \"spacing\"  or \"padding\" between them.", "Save Figure", "This button will allow you to save your figure in various forms.", "So there's a quick introduction to matplotlib, we have much more to cover!", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/virtual-machine-google-cloud-tutorial/", "h1": [], "h2": ["Intro and creating a virtual machine - Google Cloud Tutorial", "Login", "Sign up"], "h3": [], "p": ["Welcome everyone to a tutorial series on ", ". With Google Cloud, we can do things from running a typical virtual machine, to doing various machine learning tasks like analyzing text, speech, and imagery.", "To begin, we're going to launch a virtual machine. The user interface to do this may change slightly in time but I expect the process to remain mostly the same.", "The first thing you need to do is create an account. As of March 2017, if you create a new account, you should get $300 in free credit to explore the service.", "Once you have an account, and you log in, click on the \"console\" link in the top right. This takes you to your, big surprise, console! If you just created a trial account, then you probably already have a project started/created for you. To see, check here:", "In my case, I have a project called \"Tutorials.\" If you don't, then click on the drop down, and then create a new project.", "Next, we can click on the hamburger icon to bring over a sidebar. Now, under the \"compute\" header, choose \"Compute Engine.\" The compute engine is Google Cloud's virtual machine. When here, click to create an instance. Choose a name, then choose a zone. Note that various zones will have various costs per hour. Feel free to check a few to see what the cheapest option is.", "Our next choices are our Machine Type. Here, we can pick the processors and memory, including GPUs if we like. Click on customize, then slide the cores all of the way to the left, which will give you 1 shared CPU. This will be enough for you to follow along this miniseries for a while, but feel free to go larger if you'd like. If you did want GPUs, note that they are currently only available in certain zones.", "Once you're happy with your machine type, you're ready to choose your boot disk. You can go off the default if you like, but I am going to customize mine to be Ubuntu 16.04. While here, note that this is also where you can change your disk type (solid state or standard, and what size).", "After this, you've made all of the changes that will affect your price. You can see your monthly price on the right. You can click on the \"more\" option below to see the price broken down to see where you're costs are. Next, we can configure access to the server. You do not need to actually configure this to follow along here, but it can be useful. Setup of remote access differs by operating system and setup. If you're on a windows machine, see the video around 6:53 in. On Windows, Linux, or MacOS, you can also view the ", ". You can also just simply access your server via browser after you create it, which is also just fine, and super simple. To connect via your browser, you create the server, then click under the connect heading on the drop down arrow, and then you can choose to \"open in browser.\"", "At this point, you're all set with your Google Cloud virtual machine. You can do whatever you want at this point, but, if you continue here, we're going to begin digging into the Google Cloud APIs for things like image and language analysis.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t", "Contact: Harrison@pythonprogramming.net.", "Programming is a superpower."]},
{"url": "https://pythonprogramming.net/tokenizing-words-sentences-nltk-tutorial/", "h1": [], "h2": ["Tokenizing Words and Sentences with NLTK", "Login", "Sign up"], "h3": [], "p": ["Welcome to a Natural Language Processing tutorial series, using the Natural Language Toolkit, or NLTK, module with Python.", "The NLTK module is a massive tool kit, aimed at helping you with the entire Natural Language Processing (NLP) methodology. NLTK will aid you with everything from splitting sentences from paragraphs, splitting up words, recognizing the part of speech of those words, highlighting the main subjects, and then even with helping your machine to understand what the text is all about. In this series, we're going to tackle the field of opinion mining, or sentiment analysis.", "In our path to learning how to do sentiment analysis with NLTK, we're going to learn the following:", "In order to get started, you are going to need the NLTK module, as well as Python.", "If you do not have Python yet, go to ", " and download the latest version of Python if you are on Windows. If you are on Mac or Linux, you should be able to run an ", "Next, you're going to need NLTK 3. The easiest method to installing the NLTK module is going to be with pip.", "For all users, that is done by opening up cmd.exe, bash, or whatever shell you use and typing:", "Next, we need to install some of the components for NLTK. Open python via whatever means you normally do, and type:", "Unless you are operating headless, a GUI will pop up like this, only probably with red instead of green:", "Choose to download \"all\" for all packages, and then click 'download.' This will give you all of the tokenizers, chunkers, other algorithms, and all of the corpora. If space is an issue, you can elect to selectively download everything manually. The NLTK module will take up about 7MB, and the entire nltk_data directory will take up about 1.8GB, which includes your chunkers, parsers, and the corpora.", "If you are operating headless, like on a VPS, you can install everything by running Python and doing:", " (for download)", " (for download everything)", "That will download everything for you headlessly.", "Now that you have all the things that you need, let's knock out some quick vocabulary:", "These are the words you will most commonly hear upon entering the Natural Language Processing (NLP) space, but there are many more that we will be covering in time. With that, let's show an example of how one might actually tokenize something into tokens with the NLTK module.", "At first, you may think tokenizing by things like words or sentences is a rather trivial enterprise. For many sentences it can be. The first step would be likely doing a simple .split('. '), or splitting by period followed by a space. Then maybe you would bring in some ", " to split by period, space, and then a capital letter. The problem is that things like Mr. Smith would cause you trouble, and many other things. Splitting by word is also a challenge, especially when considering things like concatenations like we and are to we're. NLTK is going to go ahead and just save you a ton of time with this seemingly simple, yet very complex, operation.", "The above code will output the sentences, split up into a list of sentences, which you can do things like iterate through with a ", ".", "So there, we have created tokens, which are sentences. Let's tokenize by word instead this time:", "Now our output is: ", "There are a few things to note here. First, notice that punctuation is treated as a separate token. Also, notice the separation of the word \"shouldn't\" into \"should\" and \"n't.\" Finally, notice that \"pinkish-blue\" is indeed treated like the \"one word\" it was meant to be turned into. Pretty cool!", "Now, looking at these tokenized words, we have to begin thinking about what our next step might be. We start to ponder about how might we derive meaning by looking at these words. We can clearly think of ways to put value to many words, but we also see a few words that are basically worthless. These are a form of \"stop words,\" which we can also handle for. That is what we're going to be talking about in the next tutorial.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/build-supercomputer-raspberry-pi/", "h1": [], "h2": ["Build a Supercomputer with Raspberry Pis", "Login", "Sign up"], "h3": ["Using the Raspberry Pi as a cheap node to a supercomputer"], "p": ["Normally, building a supercomputer, even just a cheap one to learn about networking and parallel computing, is quite expensive. With the Raspberry Pi, however, we can build a functional 4-node supercomputer for less than $200.", "Now, some people might ask why you might consider building a supercomputer out of Raspberry Pis, citing their weak processing abilities. To these people, I simply respond: Because I can. Just the very notion of building a supercomputer is plain awesome.", "If being able to say you've built and own a supercomputer is not enough, that's fine. You will also learn about networking and parallel processing.", "In this series, you will learn not only how to build the supercomputer, but also how to use it by parallel programming with MPI (Message Passing Interface) and the Python programming language.", "To get started, let's learn some basics to supercomputing.:", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]},
{"url": "https://pythonprogramming.net/loading-images-python-opencv-tutorial/", "h1": [], "h2": ["OpenCV with Python Intro and loading Images tutorial", "Login", "Sign up"], "h3": ["Windows Users:", "Linux / Mac Users:"], "p": ["Welcome to a tutorial series, covering OpenCV, which is an image and video processing library with bindings in C++, C, Python, and Java. OpenCV is used for all sorts of image and video analysis, like facial recognition and detection, license plate reading, photo editing, advanced robotic vision, optical character recognition, and a whole lot more.", "We will be working through many Python examples here. Getting started with OpenCV's Python bindings is actually much easier than many people make it out to be initially. You will need two main libraries, with an optional third: ", ", ", ", and ", ".\n\n", " - There are alternative methods, but this is the easiest. Download the appropriate wheel (.whl) file, and install using pip. See video for help.", "Not familiar with using pip? See the ", " for help.", " or ", ". You may need to apt-get install python3-pip.", " or ", ".", ".", " is an optional choice for displaying frames from video or images. We will show a couple of examples using it here. ", " is used for all things \"numbers and Python.\" We are mainly making use of Numpy's array functionality. Finally, we are using the python-specific bindings for OpenCV called python-OpenCV.", "There are some operations for OpenCV that you will not be able to do without a full installation of OpenCV (about 3GB in size), but you can actually do quite a bit with the fairly minimal installation of python-OpenCV. We will wind up using the full installation of OpenCV later in this series, so you can feel free to get it if you like, but these 3 modules will keep us busy for a while!", "Make sure your installations were successful by running Python, and doing:", "If you get no errors, then you are ready to go. Ready? Let's dive off the deep-end!", "First, we should understand a few basic assumptions and paradigms when it comes to image and video analysis. With the way just about every video camera records today, recordings are actually frames, displayed one after another, 30-60+ times a second. At the core, however, they are static frames, just like images. Thus, image recognition and video analysis use identical methods for the most part. Some things, like directional tracking, is going to require a succession of images (frames), but something like facial detection, or object recognition can be done with almost the exact same code on images and video.", "Next, a lot of image and video analysis boils down to simplifying the source as much as possible. This almost always begins with a conversion to grayscale, but it can also be a color filter, gradient, or a combination of these. From here, we can do all sorts of analysis and transformations to the source. Generally, what winds up happening is there is a transformation done, then analysis, then any overlays that we wish to apply are applied back to the original source, which is why you can often see the \"finished product\" of maybe object or facial recognition being shown on a full-color image or video. Rarely is the data actually processed in raw form like this, however. Some examples of what we can do at a basic level. All of these are done with a basic web cam, nothing special:", "In the case of edge detection, the black corresponds to pixel values of (0,0,0), and white lines are (255,255,255). Every picture and frame from a video breaks down to pixels like this, and we can deduce, like in the case of edge detection, where edges are based on where the white pixels are compared to black. Then, if we want to see the original image with the edges marked, we note all of the coordinate locations of white pixels, and then we mark these locations on the original source feed image or video.", "By the end of this tutorial, you will be able to do all of the above, and be able to train your machine to recognize any object you want. Like I said initially though, the first step is usually to convert to gray scale. Before that, we need to load the image. Thus, let's do it! Throughout this entire tutorial, I greatly encourage you to use your own data to play with. If you have a webcam, definitely use it, otherwise find an image that you think will be fun to work with. If you're having trouble, here's an image of a watch:", "First, we are importing a few things, those three modules I had you all install. Next, we define img to be cv2.read(image file, parms). The default is going to be IMREAD_COLOR, which is color without any alpha channel. If you're not familiar, alpha is the degree of opaqueness (the opposite of transparency). If you need to retain the alpha channel, you can also use IMREAD_UNCHANGED. Many times, you will be reading in the color version, and later converting it to gray. If you do not have a webcam, this will be the main method you will use throughout this tutorial, loading an image.", "Rather than using IMREAD_COLOR...etc, you can also use simple numbers. You should be familiar with both options, so you understand what the person is doing. For the second parameter, you can use -1, 0, or 1. Color is 1, grayscale is 0, and the unchanged is -1. Thus, for grayscale, one could do ", "Once loaded, we use cv2.imshow(title,image) to show the image. From here, we use the cv2.waitKey(0) to wait until any key is pressed. Once that's done, we use cv2.destroyAllWindows() to close everything.", "As mentioned before, you can also display images with Matplotlib, here's some code for how you might do that:", "Note that you can plot lines, just as you would or could with any other Matplotlib graph using the pixel locations as coordinates, here. Should you wish to draw on your images, however, Matplotlib is not required. OpenCV provides great methods for this. When you are done making modifications, you can save, like so:", "Getting images into OpenCV seems easy enough, how about loading video feeds? In the next tutorial, we're going to show how to load in a webcam or video feed.", "The next tutorial: ", "\n\t\t\t\t\t\t", "  \n\t\t\t\t\t\t", "\n\t\t\t\t\t", "\n\t\t\t\t\t\t\t\t", "  \n\t\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t\t"]}
]